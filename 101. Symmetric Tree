Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root is None:
          return True
        return root.left and root.right
        
        def isSame(self, left, right)
        
        if left is None and right is None:
          return True
          
        if left is None or right is None or left.val != right.val:
          return False
        return self.isSame(left.left,right.right) and self.isSame(left.right, right.left)
